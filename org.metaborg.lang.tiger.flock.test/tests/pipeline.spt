module pipeline

language tiger

test test return [[
let 
	var a: int := 10
	var b: int := 10
in
	(return; a)
end
]] run flock-test-run-return to [[
let 
	var a: int := 10
	var b: int := 10
in
	a
end
]]

test let [[
let 
	var a: int := 10
	var b: int := 10
in
	a * b
end
]] run flock-test-run-pipeline to [[
100
]]

test nested let [[
let
	var a: int := 10
in
	let 
		var b: int := 10
	in
		a * b
	end
end
]] run flock-test-run-pipeline to [[
100
]]

test if [[
let 
	var a: int := 10
in
	if (a > 5) then 3
end
]] run flock-test-run-pipeline to [[
3
]]

test inline [[
let 
	function foo(bar: int): int = bar
in
	if (foo(6) > 5) then 3
end
]] run flock-test-run-pipeline to [[
3
]]

//test loop [[
//let
//	var N: int := 10
//	var sum: int := 0
//in
//	for x := 0 to N do
//		sum := sum + x
//end
//]] run flock-test-run-pipeline to [[
//let
//	var sum: int := 0
//in
//	for x := 0 to 10 do
//		sum := sum + x
//end
//]]

test inline twice [[
let 
	function foo(bar: int): int = bar
in
	if (foo(6) > foo(5)) then 3
end
]] run flock-test-run-pipeline to [[
3
]]

//test fact [[
//let
//    function nfactor(n: int): int =
//      if n = 0 then 1 else (n * nfactor(n-1))
//
//	var x: int := 10
//in
//    nfactor(x)
//end
//]] run flock-test-run-pipeline to [[
//3628800
//]]

//test loop [[
//let
//	var x: int := 10
//in
//    for i := 0 to x do (if i < 5 then print("a") else print("b"))
//end
//]] run flock-test-run-pipeline to [[
//let
// in
//  for i := 0 to 10 do
//    if i < 5 then
//      print("a")
//    else
//      print("b")
//end
//]]
//
//
test many vars [[
let var a0: int := 1
    var a1: int := a0 + 1
    var a2: int := a1 + 1
    var a3: int := a2 + 1
    var a4: int := a3 + 1
    var a5: int := a4 + 1
    var a6: int := a5 + 1
    var a7: int := a6 + 1
    var a8: int := a7 + 1
    var a9: int := a8 + 1
    var a10: int := a9 + 1
in
	a10
end
]] run flock-test-run-pipeline to [[
11
]]
//
//test nqueens [[
//let
//    var N := 8
//
//    type intArray = array of int
//
//    var row := intArray [ N ] of 0
//    var col := intArray [ N ] of 0
//    var diag1 := intArray [N+N-1] of 0
//    var diag2 := intArray [N+N-1] of 0
//    var debug := 0
//
//    function printboard() =
//        (for i := 0 to N - 1
//    do (for j := 0 to N - 1 
//        do print(if col[i] = j then " O" else " .");
//        print("\n"));
//          print("\n"))
//
//    function try(c: int) = 
//      (if debug = 0 then
//        (for i := 0 to c do print(".")
//      ; print("\n")
//      ; flush())
//    ; if c = N then
//        printboard()
//      else 
//        for r := 0 to N - 1 do 
//          if row[r] = 0 & diag1[r + c] = 0 & diag2[r + 7 - c] = 0 then 
//              (row[r] := 1
//            ;  diag1[r + c] := 1
//            ;  diag2[r + 7 - c] := 1
//            ;  col[c] := r
//            ;  try(c + 1)
//            ;  row[r] := 0
//            ;  diag1[r + c] := 0
//            ;  diag2[r + 7 - c] := 0))
//  in try(0)
//end
//]] run flock-test-run-pipeline to [[
//let
//  var N := 8
//  type intArray = array of int
//  var row := intArray[N] of 0
//  var col := intArray[N] of 0
//  var diag1 := intArray[N + N - 1] of 0
//  var diag2 := intArray[N + N - 1] of 0
//  var debug := 0
//  function printboard( ) =
//    (
//      for i := 0 to N - 1 do
//        (
//          for j := 0 to N - 1 do
//            print(if col[i] = j then
//              " O"
//            else
//              " .")  ;
//          print("\n")
//        )  ;
//      print("\n")
//    )
//  function try(c : int) =
//    (
//      if debug = 0 then
//        (
//          for i := 0 to c do
//            print(".")  ;
//          print("\n");
//          flush( )
//        )  ;
//      if c = N then
//        printboard( )
//      else
//        for r := 0 to N - 1 do
//          if row[r] = 0 & diag1[r + c] = 0 & diag2[r + 7 - c] = 0 then
//            (
//              row[r] := 1;
//              diag1[r + c] := 1;
//              diag2[r + 7 - c] := 1;
//              col[c] := r;
//              try(c + 1);
//              row[r] := 0;
//              diag1[r + c] := 0;
//              diag2[r + 7 - c] := 0
//            )
//    )
// in
//  try(0)
//end
//]]


