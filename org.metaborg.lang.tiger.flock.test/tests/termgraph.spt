module termgraph

language tiger

test fact [[
let
    function nfactor(n: int): int =
      if n = 0 then 1 else (n * nfactor(n-1))

	var x: int := 10
in
    nfactor(x)
end
]]
run flock-test-show-termgraph to "Mod(Let([FunDec(\"nfactor\"{FlockNodeId(4)},[FArg(\"n\"{FlockNodeId(7)},Tid(\"int\"{FlockNodeId(9)}){FlockNodeId(8)}){FlockNodeId(6)}]{FlockNodeId(5)},Tid(\"int\"{FlockNodeId(11)}){FlockNodeId(10)},If(Eq(LValue(Var(\"n\"{FlockNodeId(16)}){FlockNodeId(15)}){FlockNodeId(14)},Int(\"0\"{FlockNodeId(18)}){FlockNodeId(17)}){FlockNodeId(13)},Int(\"1\"{FlockNodeId(20)}){FlockNodeId(19)},Seq([Times(LValue(Var(\"n\"{FlockNodeId(26)}){FlockNodeId(25)}){FlockNodeId(24)},Call(\"nfactor\"{FlockNodeId(28)},[Minus(LValue(Var(\"n\"{FlockNodeId(33)}){FlockNodeId(32)}){FlockNodeId(31)},Int(\"1\"{FlockNodeId(35)}){FlockNodeId(34)}){FlockNodeId(30)}]{FlockNodeId(29)}){FlockNodeId(27)}){FlockNodeId(23)}]{FlockNodeId(22)}){FlockNodeId(21)}){FlockNodeId(12)}){FlockNodeId(3)},VarDec(\"x\"{FlockNodeId(37)},Tid(\"int\"{FlockNodeId(39)}){FlockNodeId(38)},Int(\"10\"{FlockNodeId(41)}){FlockNodeId(40)}){FlockNodeId(36)}]{FlockNodeId(2)},[Call(\"nfactor\"{FlockNodeId(44)},[LValue(Var(\"x\"{FlockNodeId(48)}){FlockNodeId(47)}){FlockNodeId(46)}]{FlockNodeId(45)}){FlockNodeId(43)}]{FlockNodeId(42)}){FlockNodeId(1)}){FlockNodeId(0)}"
test simple [[
let 
	var x: int := 10
in
	x
end
]] run flock-test-show-termgraph to "Mod(Let([VarDec(\"x\"{FlockNodeId(4)},Tid(\"int\"{FlockNodeId(6)}){FlockNodeId(5)},Int(\"10\"{FlockNodeId(8)}){FlockNodeId(7)}){FlockNodeId(3)}]{FlockNodeId(2)},[LValue(Var(\"x\"{FlockNodeId(12)}){FlockNodeId(11)}){FlockNodeId(10)}]{FlockNodeId(9)}){FlockNodeId(1)}){FlockNodeId(0)}"