module tiger/Live_Norm
imports
 tiger/Cfg
properties
  live: MaySet[Name]

property rules
  live(_.end) = {} as MaySet[Name]
  
  live(VarDec(Occ(n), _, _) -> next) = result as MaySet[Name]
  where
    asName : Name = n as Name
    result : Set[Name] = {m | m <- live(next), m != asName}
    
  live(Var(Occ(n)) -> next) = result
  where
    previous: MaySet[Name] = live(next)
    asName  : Name = n as Name
    current : MaySet[Name] = {asName} as MaySet[Name]
    result  : MaySet[Name] = MaySet[Name].lub(previous, current)
      
  live(_ -> next) = live(next)