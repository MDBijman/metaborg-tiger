module Types

imports Base
imports Bindings
imports Identifiers

sorts TypeDec
context-free syntax // type declarations
   
//  Dec.TypeDecs = <<{TypeDec "\n"}+>> {longest-match}
//  
//  TypeDec.TypeDec = <type <Id> = <Type>> 
  
  Dec.TypeDec = <type <Id> = <Type>> 
  
sorts TypeId
context-free syntax // type expressions
  Type.Tid = TypeId 
  TypeId   = Id 
  
sorts Scope
context-free syntax // semantic types
  TYPE.INT    = <INT> 
  TYPE.STRING = <STRING> 
  TYPE.NIL    = <NIL> 
  TYPE.UNIT   = <UNIT> 
  TYPE.NAME   = <NAME <Id>> 
//  TYPE.RECORD = <RECORD <Scope>>
//  TYPE.ARRAY  = <ARRAY <TYPE> <Scope>> 
  TYPE.FUN    = <FUN ( <{TYPE ","}*> ) <TYPE>>
