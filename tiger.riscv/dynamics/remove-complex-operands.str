module dynamics/remove-complex-operands

imports signatures/Variables-sig 
imports signatures/Bindings-sig 
imports signatures/Numbers-sig 
imports signatures/tiger-sig
imports pp
imports statix/api

rules 
  
  rco-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"rco.aterm")> path
    with result   := <remove-complex-operands>node
  
  rco-pp:
    (node, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"rco.tig")> path
    with result   := <remove-complex-operands; pp-debug>node
    
rules

  remove-complex-operands = 
    bottomup(try(rco-exp))
  
  rco-atom : 
    e -> ([], e)
    where <is-atom> e
  
  rco-atom :
    e -> ([VarDecNoType(x, e)], Var(x))
    where <not(is-atom)> e
    where <newname> "tmp" => x
    
  is-atom = 
    ?Int(_) <+ ?Real(_) <+ ?Var(_) 
    <+ Let(id, [is-atom])
  
//  rco-exp :
//    Plus(e1, e2) -> <try(rm-mt-let)>Let([dec1*, dec2*], [Plus(e3, e4)])
//    with <rco-atom> e1 => (dec1*, e3)
//    with <rco-atom> e2 => (dec2*, e4)

  rco-exp :
    op#(es1) -> <try(rm-mt-let)>Let(<concat>dec*, [op#(es2)])
    where <is-operator> op
    with <map(rco-atom); unzip> es1 => (dec*, es2)
        
  rm-mt-let :
    Let([], [e]) -> e
    
  is-operator = 
    ?"Uminus"
    <+ ?"Times" 
    <+ ?"Divide" 
    <+ ?"Plus"
    <+ ?"Minus"
    <+ ?"Eq"
    <+ ?"Neq"
    <+ ?"Gt"
    <+ ?"Lt"
    <+ ?"Geq"
    <+ ?"Leq"
    <+ ?"And"
    <+ ?"Or" 